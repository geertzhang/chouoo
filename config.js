/**
 * Config for Gulp Tasks
 * @param  {Object} $ Gulp Load Plugins
 * @return {Object}   Config object
 */
module.exports = function ($) {
	'use strict';

	var config, _$, _path;

	/**
	 * Config of gulp task
	 * @type {Object}
	 *
	 * index  string  Index file for server
	 * babel  boolean Trun on/off ECMAscript 2015
	 * reload string  "browserSync" or "liveReload"
	 */
	config = {
		index  : 'index.html',
		babel  : true,
		reload : 'browserSync'
	};

	/**
	 * Root directories of project
	 * @type {Object}
	 */
	config.basePath = { default : './dist/',
		src   : './src/',
		dest  : './dist/',
		build : './build/',
		tasks : './gulp_tasks/',
		zip   : './'
	};

	_$    = $.argv;
	_path = config.basePath;

	/**
	 * Arguments of command
	 * @type {Object}
	 */
	config.arg = { default : _$.p,
		a : _$.a,
		b : _$.b,
		c : _$.c,
		m : _$.m,
		p : _$.p,
		z : _$.z
	};
	
	/**
	 * Config about server, mainly browser-sync
	 * @type {Object}
	 * 
	 * open     boolean Turn on/off auto open browser
	 * port     integer Port of server
	 * index    string  File
	 * logLevel string  Console info level [debug | info | silent]
	 */
	config.server = {
		open     : false,
		port     : 9000,
		index    : config.index,
		logLevel : 'info',
		quiet    : true
	};

	
	/**
	 * Styles task
	 * @type {Object}
	 *
	 * style   string Output css style [nested | expanded | compact | compressed]
	 * include string Included files
	 * enclude string Exclude files
	 */
	config.styles = { default : _path.dest + 'css/',
		build   : _path.build + 'css/',
		dest    : _path.dest + 'css/',
		src     : _path.src + 'styles/',
		style   : 'expanded',
		include : _path.src + 'styles/' + '**/*.scss',
		exclude : '!' + _path.src + 'scripts/' + '**/_*.scss'
	};

	/**
	 * Scripts task
	 * @type {Object}
	 *
	 * concat string Concated js file
	 */
	config.scripts = { default : _path.dest + 'js/',
		build      : _path.build + 'js/',
		dest       : _path.dest + 'js/',
		src        : _path.src + 'scripts/',
		concat     : false,
		concatfile : 'main.js',
		include    : _path.src + 'scripts/' + '**/*.js',
		exclude    : '!' + _path.src + 'scripts/' + '**/_*.js'
	};

	/**
	 * Images task
	 * @type {Object}
	 */
	config.images = { default : _path.dest + 'images/',
		build : _path.build + 'images/',
		dest  : _path.dest + 'images/',
		src   : _path.src + 'images/'
	};

	/**
	 * Templates task
	 * @type {Object}
	 */
	config.templates = { default: _path.dest + '',
		build  : _path.build + '',
		dest   : _path.dest + '',
		src    : _path.src + 'templates/',
		suffix : '{html,htm,php}'
	};

	/**
	 * Extras task
	 * @type {Object}
	 */
	config.extras = { default : _path.dest + '',
		build : _path.build + '',
		dest  : _path.dest + '',
		src   : _path.src + 'extras/'
	};

	/**
	 * Fonts task
	 * @type {Object}
	 */
	config.fonts = { default: _path.dest + 'fonts/',
		build : _path.build + 'fonts/',
		dest  : _path.dest + 'fonts/',
		src   : _path.src + 'fonts/'
	};

	/**
	 * Libraries task, support to dependencies
	 * @type {Object}
	 */
	config.libs = {
		build : _path.build,
		dest  : _path.dest,
		src   : _path.src + 'libs/'
	};

	/**
	 * Help task
	 * @type {Object}
	 */
	config.help = {
		USAGE    : '\nusage: gulp [task] [--cmd|-arg]\n',
		args     : '    [-b] build\n    [-p] production\n    [-h] assist\n',
		COMMANDS : 'The tasks are:',
		help     : '    help           View this help infomation',
		scripts  : '    scripts        Pretreat scripts',
		styles   : '    styles         Styles files are generated by autoprefixer | sass | min',
		build    : '    build          Build to dest',
		print    : function (name) {
			if (_$.h) console.log(config.help[name]);
			return;
		}
	};

	return config;
};